{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open-Source Network Automation Labs","text":""},{"location":"#idea","title":"Idea","text":"<p>Over the next few weeks, we will continuously add new labs. Our ultimate goal is to develop a community-driven lab collection.</p> <p>Currently, the planned structure is as follows, though it may change over time:</p> <ul> <li>Exercises range from small to large and cater to beginners and professionals. Micro labs are maintained directly in the main repository, while larger labs, which may require additional files or setup, have individual repositories that can be forked and/or cloned.</li> <li>GitHub Discussions can be used to share solutions and engage in discussions.</li> <li>Lab Categories include</li> <li>Configuration management<ul> <li>Ansible</li> <li>Terraform</li> <li>SaltStack</li> <li>StackStorm</li> <li>...</li> </ul> </li> <li>Python Automation<ul> <li>NAPALM</li> <li>Netmiko</li> <li>Nornir</li> <li>...</li> </ul> </li> <li>GoLang Automation<ul> <li>gNMI</li> <li>...</li> </ul> </li> <li>Testing and CI/CD<ul> <li>NUTS</li> <li>ANTA</li> <li>ondatra</li> <li>Batfish</li> <li>...</li> </ul> </li> <li>Network Resource Managers<ul> <li>NetBox</li> <li>Nautobot</li> <li>Infrahub</li> </ul> </li> <li>Foundational Skills<ul> <li>Git</li> <li>YAML</li> <li>Jinja</li> <li>YANG</li> <li>Linux</li> </ul> </li> </ul>"},{"location":"#usability","title":"Usability","text":""},{"location":"#codespaces","title":"Codespaces","text":"<p>The Opensource Network Automation Labs provide the convenience of starting many labs directly in GitHub codespaces. This is an easy way to set up the environment without needing to install it locally.</p> <p>Please note that within the free tier, users have a limited number of free minutes to utilize codespaces per month. For more details, refer to the pricing page.</p>"},{"location":"#fork","title":"Fork","text":"<p>In order to store your progress and modifications within a git repository, you can easily fork the lab repository. By forking, you create a personal copy of the repository that you can work on independently.</p> <p>GitHub - Fork a repository</p>"},{"location":"#solutions","title":"Solutions","text":"<p>The lab GitHub repository includes a Discussion feature, which serves as a valuable platform for sharing and discussing your solutions with fellow learners. This fosters an environment of collaborative learning, where participants can exchange ideas and learn from one another. Join in the discussions and contribute to the growth of the community around Opensource Network Automation Labs.</p>"},{"location":"#acknowledgment","title":"Acknowledgment","text":"<p>This project was inspired by the tremendous effort put forth by Ivan Pepelnjak on the bgplabs.net project.</p>"},{"location":"foundation/git/introduction/","title":"Git Introduction","text":"<p>Git is the de facto standard version control system and will be invaluable in your future network automation projects. If you are not familiar with the basic usage of Git, there are many excellent tutorials and blog posts available.</p> <ul> <li>Git documentation</li> <li>Git 101 for system engineers</li> <li>GitHub training</li> </ul>","tags":["git","introduction"]},{"location":"foundation/jinja2/introduction/","title":"Basic Templating","text":"<p>The following exercises provide a basic introduction to Jinja2 templating.</p> <p>To verify your solution, you can use an online Jinja sandbox like Jinja101 or the Python CLI tool Nettowel.</p> <p>Tip</p> <p>You can install \"nettowel\" with <code>pipx</code>: <pre><code>pipx install nettowel[full]\n</code></pre></p>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#find-the-input-data","title":"Find the input data","text":"<p>In this chapter, the goal of the exercise is to identify the YAML input used to render the configuration snippet with the provided template.</p>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#vlan","title":"VLAN","text":"template<pre><code>!\n{%- for vlan in vlans %}\nvlan {{ vlan['id'] }}\n name {{ vlan['name'] | replace(' ', '_') }}\n{%- endfor %}\n!\n</code></pre> rendered configuration<pre><code>!\nvlan 10\n name hr\nvlan 11\n name finance\nvlan 21\n name printer\nvlan 30\n name server_external\n!\n</code></pre> <p>What YAML data was used to render the template?</p> Solution <pre><code>---\nvlans:\n- id: 10\n  name: hr\n- id: 11\n  name: finance\n- id: 21\n  name: printer\n- id: 30\n  name: server external\n...\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#system","title":"System","text":"template<pre><code>system {\n    name-server {\n    {%- for name_server in dns %}\n        {{ name_server }};\n    {%- endfor %}\n    }\n    syslog {\n        {%- for syslog_server in syslog %}\n        host {{ syslog_server }} {\n            any any;\n            daemon info;\n        }\n        {%- endfor %}\n    }\n    ntp {\n        {%- for ntp_server in ntp %}\n        server {{ ntp_server }};\n        {%- endfor %}\n    }\n}\n</code></pre> rendered configuration<pre><code>system {\n    name-server {\n        1.1.1.1;\n        8.8.8.8;\n        8.8.4.4;\n    }\n    syslog {\n        host 10.0.0.10 {\n            any any;\n            daemon info;\n        }\n    }\n    ntp {\n        server 0.ch.pool.ntp.org;\n        server 1.ch.pool.ntp.org;\n    }\n}\n</code></pre> <p>What YAML data was used to render the template?</p> Solution <pre><code>---\ndns:\n  - 1.1.1.1\n  - 8.8.8.8\n  - 8.8.4.4\nntp:\n  - 0.ch.pool.ntp.org\n  - 1.ch.pool.ntp.org\nsyslog:\n  - 10.0.0.10\n...\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#ospf","title":"OSPF","text":"template<pre><code>!\nrouter ospf {{ ospf.id }}\n{%- for net in ospf.network %}\n network {{ net.net }} area {{ net.area }}\n{%- endfor %}\n!\n{%- for interface in ospf.interface %}\ninterface {{ interface.name }}\n ip ospf {{ ospf.id }} area {{ interface.area }}\n {%- if interface.cost is defined %}\n ip ospf {{ ospf.id }} cost {{ interface.cost }}\n {%- endif %}\n {%- if interface.priority is defined %}\n ip ospf priority {{ interface.priority }}\n {%- endif %}\n!\n{%- endfor %}\n</code></pre> rendered configuration<pre><code>!\nrouter ospf 1\n network 192.168.0.0 0.0.255.255 area 0\n network 172.16.10.0 0.0.0.255 area 1\n!\ninterface Lo0\n ip ospf 1 area 0\n!\ninterface Ethernet 0\n ip ospf 1 area 0\n ip ospf 1 cost 10\n!\ninterface Ethernet 3\n ip ospf 1 area 0\n ip ospf priority 9\n!\n</code></pre> <p>What YAML data was used to render the template?</p> Solution <pre><code>---\nospf:\n  id: 1\n  network:\n    - net: 192.168.0.0 0.0.255.255\n      area: 0\n    - net: 172.16.10.0 0.0.0.255\n      area: 1\n  interface:\n    - name: Lo0\n      area: 0\n    - name: Ethernet 0\n      area: 0\n      cost: 10\n    - name: Ethernet 3\n      area: 0\n      priority: 9\n...\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#write-the-template","title":"Write the template","text":"<p>In this chapter, the goal of the exercise is to write a Jinja2 template that produces the expected configuration snippet using the provided input data.</p>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#vlan_1","title":"VLAN","text":"input data<pre><code>---\nvlans:\n  -\n    - 10\n    - hr\n  -\n    - 11\n    - finance\n  -\n    - 21\n    - printer\n  -\n    - 30\n    - server external\n</code></pre> rendered configuration<pre><code>!\nvlan 10\n name hr\nvlan 11\n name finance\nvlan 21\n name printer\nvlan 30\n name server_external\n!\n</code></pre> <p>What template was used to generate the configuration snippet?</p> Solution <pre><code>!\n{%- for vlan in vlans %}\nvlan {{ vlan[0] }}\nname {{ vlan[1] | replace(' ', '_') }}\n{%- endfor %}\n!\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#system_1","title":"System","text":"input data<pre><code>---\nserver:\n  dns:\n    - 1.1.1.1\n    - 8.8.8.8\n    - 8.8.4.4\n  ntp:\n    - 0.ch.pool.ntp.org\n    - 1.ch.pool.ntp.org\n  syslog:\n    - 10.0.0.10\n</code></pre> rendered configuration<pre><code>!\nip name-server 1.1.1.1 8.8.8.8 8.8.4.4\n!\nservice timestamps log datetime msec\nlogging buffered 8192\nlogging host 10.0.0.10\n!\nntp server 0.ch.pool.ntp.org\nntp server 1.ch.pool.ntp.org\n!\n</code></pre> <p>What template was used to generate the configuration snippet?</p> Solution <pre><code>!\nip name-server{% for name_server in server['dns'] %} {{ name_server }}{% endfor %}\n!\nservice timestamps log datetime msec\nlogging buffered 8192\n{%- for syslog_server in server['syslog'] %}\nlogging host {{ syslog_server }}\n{%- endfor %}\n!\n{%- for ntp_server in server['ntp'] %}\nntp server {{ ntp_server }}\n{%- endfor %}\n!\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#interface","title":"Interface","text":"input data<pre><code>---\ninterfaces:\n  - name: ge-0/0/2\n    description: uplink\n    ip: 192.168.1.1\n    mask: 30\n  - name: Lo0\n    ip: 10.10.10.10\n    mask: 32\n</code></pre> rendered configuration<pre><code>interfaces {\n    ge-0/0/2 {\n        description uplink;\n        unit 0 {\n            family inet {\n                address 192.168.1.1/30;\n            }\n        }\n    }\n}\ninterfaces {\n    Lo0 {\n        unit 0 {\n            family inet {\n                address 10.10.10.10/32;\n            }\n        }\n    }\n}\n</code></pre> <p>What template was used to generate the configuration snippet?</p> Solution <pre><code>{%- for interface in interfaces %}\ninterfaces {\n    {{ interface['name'] }} {\n        {%- if interface['description'] is defined %}\n        description {{ interface['description'] }};\n        {%- endif %}\n        unit 0 {\n            family inet {\n                address {{ interface['ip'] }}/{{ interface['mask'] }};\n            }\n        }\n    }\n}\n{%- endfor %}\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#render-the-templates","title":"Render the templates","text":"<p>In the following exercises, you will take on the role of Jinja2 and render the templates using the provided input data.</p>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#vlan_2","title":"VLAN","text":"template<pre><code>!\n{%- for id, name in vlans.items() %}\nvlan {{ id }}\n name {{ name | replace(' ', '_') }}\n{%- endfor %}\n!\n</code></pre> input data<pre><code>---\nvlans:\n  10: hr\n  11: finance\n  12: server external\n</code></pre> <p>What does the generated configuration snippet look like?</p> Solution <pre><code>!\nvlan 10\nname hr\nvlan 11\nname finance\nvlan 12\nname server_external\n!\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#system_2","title":"System","text":"template<pre><code>!\nip name-server{% for name_server in servers[0] %} {{ name_server }}{% endfor %}\n!\nservice timestamps log datetime msec\nlogging buffered 8192\n{%- for syslog_server in servers[2] %}\nlogging host {{ syslog_server }}\n{%- endfor %}\n!\n{%- for ntp_server in servers[1] %}\nntp server {{ ntp_server }}\n{%- endfor %}\n!\n</code></pre> input data<pre><code>---\nservers:\n  - [1.1.1.1, 8.8.8.8, 8.8.4.4]\n  - [0.ch.pool.ntp.org, 1.ch.pool.ntp.org]\n  - [10.0.0.10]\n</code></pre> <p>What does the generated configuration snippet look like?</p> Solution <pre><code>!\nip name-server 1.1.1.1 8.8.8.8 8.8.4.4\n!\nservice timestamps log datetime msec\nlogging buffered 8192\nlogging host 10.0.0.10\n!\nntp server 0.ch.pool.ntp.org\nntp server 1.ch.pool.ntp.org\n!\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/jinja2/introduction/#vrf","title":"VRF","text":"template<pre><code>{%- for vrf in vrfs %}\nrouting-instances {\n    {{ vrf.name }} {\n        instance-type vrf;\n        route-distinguisher {{ asn }}:{{ vrf.id }}\n        vrf-target target:{{ asn }}:123456;\n        protocols {\n            bgp {\n                group {{ vrf.name }} {\n                    log-updown;\n                    {%- for neighbor in bgp[vrf.name] %}\n                    neighbor {{ neighbor.ip }} {\n                        description {{ neighbor.name }};\n                        peer-as {{ neighbor.asn }};\n                    }\n                    {%- endfor %}\n                }\n            }\n        }\n    }\n}\n{%- endfor %}\n</code></pre> input data<pre><code>---\nasn: 65000\n\nvrfs:\n  - name: CustA\n    id: 123\n  - name: CustB\n    id: 124\n\nbgp:\n  CustA:\n    - ip: 10.0.0.1\n      name: CE01\n      asn: 65010\n    - ip: 10.0.0.5\n      name: CE02\n      asn: 65010\n  CustB:\n    - ip: 192.168.0.1\n      name: CE01\n      asn: 65064\n    - ip: 192.168.0.5\n      name: CE02\n      asn: 65064\n</code></pre> <p>What does the generated configuration snippet look like?</p> Solution <pre><code>routing-instances {\n    CustA {\n        instance-type vrf;\n        route-distinguisher 65000:123\n        vrf-target target:65000:123456;\n        protocols {\n            bgp {\n                group CustA {\n                    log-updown;\n                    neighbor 10.0.0.1 {\n                        description CE01;\n                        peer-as 65010;\n                    }\n                    neighbor 10.0.0.5 {\n                        description CE02;\n                        peer-as 65010;\n                    }\n                }\n            }\n        }\n    }\n}\nrouting-instances {\n    CustB {\n        instance-type vrf;\n        route-distinguisher 65000:124\n        vrf-target target:65000:123456;\n        protocols {\n            bgp {\n                group CustB {\n                    log-updown;\n                    neighbor 192.168.0.1 {\n                        description CE01;\n                        peer-as 65064;\n                    }\n                    neighbor 192.168.0.5 {\n                        description CE02;\n                        peer-as 65064;\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>","tags":["templating","jinja2","introduction"]},{"location":"foundation/yaml/introduction/","title":"YAML Introduction","text":"<p>YAML (YAML Ain't Markup Language) is a human-readable data serialization standard that is commonly used for configuration files and data exchange between languages with different data structures. It will be extremely useful in your network automation projects. If you are not familiar with YAML, there are many excellent tutorials and resources available.</p> <ul> <li>https://yaml.org/</li> </ul> <p>The following exercises provide a basic introduction to YAML. To verify your solution, you can use online converters or CLI tools like <code>yq</code> or Nettowel. When working with YAML keep in mind the difference between version 1.1 and 1.2! <code>yq</code> and <code>nettowel</code> use version 1.2 as default. </p> <p>Tip</p> <p>You can install \"nettowel\" with <code>pipx</code>: <pre><code>pipx install nettowel[full]\n</code></pre></p>","tags":["data-serialization","yaml","introduction"]},{"location":"foundation/yaml/introduction/#json-to-yaml","title":"JSON to YAML","text":"<ul> <li>Convert the following JSON to YAML:</li> </ul> json<pre><code>{\n    \"host\": \"Switch01\",\n    \"ip\": \"10.11.12.13\",\n    \"dns\": \"8.8.8.8\",\n    \"domain_name\": \"network.automation.lab\",\n    \"fqdn\": \"Switch01.network.automation.lab\"\n}\n</code></pre> Solution <pre><code>---\nhost: Switch01\nip: 10.11.12.13\ndns: 8.8.8.8\ndomain_name: network.automation.lab\nfqdn: Switch01.network.automation.lab\n...\n</code></pre> <ul> <li>Convert the following JSON to YAML:</li> </ul> json<pre><code>[\n    \"interface Gig1/0/1\",\n    \"interface Gig1/0/2\",\n    \"interface gig1/0/3\"\n]\n</code></pre> Solution <pre><code>---\n- interface Gig1/0/1\n- interface Gig1/0/2\n- interface gig1/0/3\n...\n</code></pre> <ul> <li>Convert the following JSON to YAML:</li> </ul> json<pre><code>{\n    \"OSPF\": {\n        \"area\": 10,\n        \"hello\": 5,\n        \"interface-type\": \"p2p\"\n    },\n    \"bgp\": {\n        \"asn\": 65123,\n        \"rr\": true\n    }\n}\n</code></pre> Solution <pre><code>---\nOSPF: \n  area: 10\n  hello: 5\n  interface-type: p2p\nbgp:\n  asn: 65123\n  rr: True\n...\n</code></pre> <ul> <li>Convert the following JSON to YAML:</li> </ul> json<pre><code>[\n    [\n        11,\n        \"hr\"\n    ],\n    [\n        21,\n        \"finance\"\n    ],\n    [\n        31,\n        \"printer\"\n    ]\n]\n</code></pre> Solution <pre><code>---\n-\n  - 11\n  - hr\n-\n  - 21\n  - finance\n-\n  - 31\n  - printer\n...\n</code></pre> <ul> <li>Convert the following JSON to YAML:</li> </ul> json<pre><code>{\n    \"ospf\": {\n        \"area\": 0,\n        \"interfaces\": [\n        {\n            \"name\": \"Gig1/0/1\",\n            \"passive\": false,\n            \"type\": \"p2p\"\n        },\n        {\n            \"name\": \"Gig1/0/1\",\n            \"passive\": true,\n            \"type\": \"broadcast\"\n        }\n        ],\n        \"redistribute\": [\n        \"bgp\",\n        \"isis\"\n        ],\n        \"id\": \"10.10.10.10\"\n    }\n}\n</code></pre> Solution <pre><code>---\nospf:\n  area: 0\n  interfaces:\n    - name: Gig1/0/1\n      passive: False\n      type: p2p\n    - name: Gig1/0/1\n      passive: True\n      type: broadcast\n  redistribute:\n    - bgp\n    - isis\n  id: '10.10.10.10'\n...\n</code></pre>","tags":["data-serialization","yaml","introduction"]},{"location":"foundation/yaml/introduction/#craft-yaml","title":"Craft YAML","text":"<ul> <li>Create a sequence of mappings for vlan definitions with <code>id</code> and <code>name</code> as keys.</li> </ul> Solution <pre><code>---\n- name: hr\n  id: 11\n- name: finance\n  id: 22\n- name: printer\n  id: 33\n- name: server\n  id: 100\n...\n</code></pre> <ul> <li>Create a mapping for interfaces with tagged and untagged vlan sequences.</li> </ul> Solution <pre><code>---\nEthernet 1/0/1:\n  tagged: [10, 11, 12, 20, 21]\n  untagged: [1]\nEthernet 1/0/2:\n  tagged: [13, 14, 15, 20]\n  untagged: [1]\nEthernet 1/0/3:\n  tagged: []\n  untagged: [20]\n...\n</code></pre> <ul> <li>Write a YAML file with <code>hostname</code>, <code>domain-name</code>, a list of <code>dns</code> servers, a list of <code>ntp</code> servers and a list of <code>syslog</code> servers.</li> </ul> Solution <pre><code>---\nhostname: sw01\ndomain-name: network.automation.lab\ndns:\n  - 1.1.1.1 # CloudFlare\n  - 8.8.8.8 # Google DNS\nntp:\n  - 0.ch.pool.ntp.org\n  - 1.ch.pool.ntp.org\nsyslog:\n  - 10.0.0.11\n...\n</code></pre>","tags":["data-serialization","yaml","introduction"]},{"location":"foundation/yaml/introduction/#yaml-to-json","title":"YAML to JSON","text":"<ul> <li>Convert the following YAML to JSON:</li> </ul> yaml<pre><code>%YAML 1.1\n---\nsexagesimal: 123:10:10\nport: 80\nalt_port: !!str 8080\noctal: 02472256\nhexadecimal: 0x_0A_74_AE\nbinary: 0b1010_0111_0100_1010_1110\n...\n</code></pre> Solution <pre><code>{\n  \"sexagesimal\": 443410,\n  \"port\": 80,\n  \"alt_port\": \"8080\",\n  \"octal\": 685230,\n  \"hexadecimal\": 685230,\n  \"binary\": 685230,\n}\n</code></pre> <ul> <li>Convert the following YAML to JSON:</li> </ul> yaml<pre><code>%YAML 1.2\n---\nsexagesimal: 123:10:10\nport: 80\nalt_port: !!str 8080\noctal: 02472256\nhexadecimal: 0x_0A_74_AE\nbinary: 0b1010_0111_0100_1010_1110\n...\n</code></pre> Solution <pre><code>{\n  \"sexagesimal\": \"123:10:10\",\n  \"port\": 80,\n  \"alt_port\": \"8080\",\n  \"octal\": 2472256,\n  \"hexadecimal\": 685230,\n  \"binary\": 685230\n}\n</code></pre> <ul> <li>Convert the following YAML to JSON:</li> </ul> yaml<pre><code>%YAML 1.1\n---\n'on': on\n'off': off\n'yes': yes\n'no': no\n'~': ~ \n'none': none\n...\n</code></pre> Solution <pre><code>{\n  \"no\": false,\n  \"none\": \"none\",\n  \"off\": false,\n  \"on\": true,\n  \"yes\": true,\n  \"~\": null\n}\n</code></pre> <ul> <li>Convert the following YAML to JSON:</li> </ul> yaml<pre><code>%YAML 1.2\n---\n'on': on\n'off': off\n'yes': yes\n'no': no\n'~': ~ \n'none': none\n...\n</code></pre> Solution <pre><code>{\n  \"on\": \"on\",\n  \"off\": \"off\",\n  \"yes\": \"yes\",\n  \"no\": \"no\",\n  \"~\": null,\n  \"none\": \"none\"\n}\n</code></pre> Tip <p>Always use <code>True|true</code> or <code>False|false</code> for booleans.</p> <ul> <li>Convert the following YAML to JSON:</li> </ul> yaml<pre><code>---\nname: &amp;a Network Automation Labs\nalias: *a\nmgmt_vlan: &amp;mgmt_vlan\n  name: mgmt\n  id: 4\naccess_vlan: &amp;access_vlan\n  name: access\n  id: 123\nvlans:\n  - *mgmt_vlan\n  - *access_vlan\n...\n</code></pre> Solution <pre><code>{\n  \"name\": \"Network Automation Labs\",\n  \"alias\": \"Network Automation Labs\",\n  \"mgmt_vlan\": {\n    \"name\": \"mgmt\",\n    \"id\": 4\n  },\n  \"access_vlan\": {\n    \"name\": \"access\",\n    \"id\": 123\n  },\n  \"vlans\": [\n    {\n      \"name\": \"mgmt\",\n      \"id\": 4\n    },\n    {\n      \"name\": \"access\",\n      \"id\": 123\n    }\n  ]\n}\n</code></pre> <ul> <li>Convert the following YAML to JSON:</li> </ul> yaml<pre><code>---\nCustA: &amp;service\n  name: CustA\n  redistribute: True\n  ipv6: True\n  ipv4: True\nCustB:\n  &lt;&lt;: *service\n  name: CustB\n...\n</code></pre> Solution <pre><code>{\n  \"CustA\": {\n    \"name\": \"CustA\",\n    \"redistribute\": true,\n    \"ipv6\": true,\n    \"ipv4\": true\n  },\n  \"CustB\": {\n    \"name\": \"CustB\",\n    \"redistribute\": true,\n    \"ipv6\": true,\n    \"ipv4\": true\n  }\n}\n</code></pre>","tags":["data-serialization","yaml","introduction"]},{"location":"golang/comming_soon/","title":"Comming soon","text":""},{"location":"golang/comming_soon/#golang-automation","title":"GoLang Automation","text":"<p>Coming soon ...</p>"},{"location":"resource_managers/comming_soon/","title":"Comming soon","text":""},{"location":"resource_managers/comming_soon/#network-resource-managers","title":"Network Resource Managers","text":"<p>Coming soon ...</p>"},{"location":"testing/comming_soon/","title":"Comming soon","text":""},{"location":"testing/comming_soon/#testing-and-cicd","title":"Testing and CI/CD","text":"<p>Coming soon ...</p>"},{"location":"ansible-collect-configs/","title":"Collect Configs with Ansible","text":"Level beginner Repo https://github.com/NetAutLabs/ansible_collect_configs Discussion Discussion GitHub Repo Codespaces GitHub Codespaces NOSs VyOS, Nokia SR Linux <p>In this lab, you will write an Ansible playbook to back up configurations of network devices. You will work with a provided topology of four routers set up with Netlab. The inventory is preconfigured to get you started quickly.</p> <p>Tip</p> <p>The lab can be run with GitHub Codespaces. For information on how to run the netlab topology on your infrastructure, take a look at netlab.</p>","tags":["ansible","beginner","codespaces"]},{"location":"ansible-collect-configs/#inventory","title":"Inventory","text":"<p>The inventory is prepared, but if you change the device types or the topology, you will need to update the inventory accordingly. You can inspect the inventory using <code>ansible-inventory</code>.</p> ansible-inventory -i inventory.yaml --graph --vars<pre><code>@all:\n  |--@ungrouped:\n  |--@routers:\n  |  |--@vyos:\n  |  |  |--r1\n  |  |  |  |--{ansible_host = 192.168.121.101}\n  |  |  |  |--{ansible_network_os = vyos}\n  |  |  |  |--{ansible_ssh_pass = vyos}\n  |  |  |  |--{ansible_user = vyos}\n  |  |  |--r3\n  |  |  |  |--{ansible_host = 192.168.121.103}\n  |  |  |  |--{ansible_network_os = vyos}\n  |  |  |  |--{ansible_ssh_pass = vyos}\n  |  |  |  |--{ansible_user = vyos}\n  |  |  |--{ansible_network_os = vyos}\n  |  |  |--{ansible_ssh_pass = vyos}\n  |  |  |--{ansible_user = vyos}\n  |  |--@srlinux:\n  |  |  |--r2\n  |  |  |  |--{ansible_connection = ansible.netcommon.httpapi}\n  |  |  |  |--{ansible_host = 192.168.121.102}\n  |  |  |  |--{ansible_network_os = nokia.srlinux.srlinux}\n  |  |  |  |--{ansible_password = NokiaSrl1!}\n  |  |  |  |--{ansible_user = admin}\n  |  |  |--r4\n  |  |  |  |--{ansible_connection = ansible.netcommon.httpapi}\n  |  |  |  |--{ansible_host = 192.168.121.104}\n  |  |  |  |--{ansible_network_os = nokia.srlinux.srlinux}\n  |  |  |  |--{ansible_password = NokiaSrl1!}\n  |  |  |  |--{ansible_user = admin}\n  |  |  |--{ansible_connection = ansible.netcommon.httpapi}\n  |  |  |--{ansible_network_os = nokia.srlinux.srlinux}\n  |  |  |--{ansible_password = NokiaSrl1!}\n  |  |  |--{ansible_user = admin}\n</code></pre>","tags":["ansible","beginner","codespaces"]},{"location":"ansible-collect-configs/#setup","title":"Setup","text":"<p>To interact with the virtual devices, you need to start the topology located in the \"netlab\" directory. From the main directory, you can use the shortcut command <code>make setup</code> to initiate it. To tear down the lab, use <code>make destroy</code>. If you have the necessary expertise, you can edit the netlab topology, such as changing the Network Operating Systems (NOSs).</p>","tags":["ansible","beginner","codespaces"]},{"location":"ansible-collect-configs/#playbook","title":"Playbook","text":"<p>The goal of the exercise is to write an Ansible playbook that automates the backup of all router configurations in the provided topology. The Discussions on the GitHub Repo can be used to discuss the lab and your solutions. </p> <p>For many NOSs Ansible collections exist. For example:</p> <ul> <li>Arista: https://docs.ansible.com/ansible/latest/collections/arista/eos/index.html</li> <li>Cisco: https://docs.ansible.com/ansible/latest/collections/cisco/index.html</li> <li>FRR: https://docs.ansible.com/ansible/latest/collections/frr/frr/index.html</li> <li>Juniper: https://docs.ansible.com/ansible/latest/collections/junipernetworks/junos/index.html</li> <li>Nokia: https://galaxy.ansible.com/ui/namespaces/nokia/</li> <li>VyOS: https://docs.ansible.com/ansible/latest/collections/vyos/vyos/index.html</li> </ul>","tags":["ansible","beginner","codespaces"]},{"location":"python-pytest-device-helper/","title":"Testing DeviceHelper with PyTest","text":"Level beginner Repo https://github.com/NetAutLabs/python_pytest_device_helper Discussion Discussion GitHub Repo Codespaces GitHub Codespaces","tags":["pytest","beginner","codespaces"]},{"location":"python-pytest-device-helper/#lab-goal","title":"Lab Goal","text":"<p>The goal of this lab is to learn and understand the differences between three testing approaches: \"monkey patching\", using <code>pytest-mock</code>, and creating \"fake objects\". You will work on a Python project with five test files, but only the three mentioned below contain TODOs that need fixing.</p>","tags":["pytest","beginner","codespaces"]},{"location":"python-pytest-device-helper/#objectives","title":"Objectives","text":"<ol> <li> <p>Monkey Patching:</p> <ul> <li>Explore how to dynamically modify or replace methods and attributes in your code during runtime.</li> <li>Complete the TODOs in <code>tests/test_device_helper_01_monkeypatch.py</code>.</li> </ul> </li> <li> <p>pytest-mock:</p> <ul> <li>Learn how to use the <code>pytest-mock</code> library to create and manage mock objects.</li> <li>Discover how mocking can help isolate the code under test and verify interactions.</li> <li>Complete the TODOs in <code>tests/test_device_helper_02_mock.py</code>.</li> </ul> </li> <li> <p>Fake Objects:</p> <ul> <li>Implement fake objects that provide simplified, yet working, implementations of dependencies.</li> <li>Recognize when and why to use fake objects over mocks or monkey patching.</li> <li>Complete the TODOs in <code>tests/test_device_helper_03_fakedevice.py</code>.</li> </ul> </li> </ol>","tags":["pytest","beginner","codespaces"]},{"location":"python-pytest-device-helper/#additional-information","title":"Additional Information:","text":"<ul> <li>The test files are located in the <code>tests</code> directory, but only <code>tests/test_device_helper_01_monkeypatch.py</code>, <code>tests/test_device_helper_02_mock.py</code>, and <code>tests/test_device_helper_03_fakedevice.py</code> contain TODOs that require your attention.</li> <li>These tests are marked with <code>xfail</code> to indicate that they are expected to fail. After you implement the necessary changes, remove the <code>xfail</code> markers.</li> <li> <p>To run and check the tests, use the following command:     <pre><code>python3 -m pytest\n</code></pre></p> </li> <li> <p>Test execution needs to be under one second.</p> </li> </ul>","tags":["pytest","beginner","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/","title":"L3VPN Services with Nornir","text":"Level intermediate Repo https://github.com/NetAutLabs/nornir_mpls_l3_vpn_service Discussion Discussion GitHub Repo Codespaces GitHub Codespaces NOSs Arista cEOS <p>In this lab, you will automate the provisioning and deprovisioning of L3VPN services in an MPLS network based on the service definitions in <code>services.yaml</code>.</p> <p>Fork</p> <p>Fork the repository to be able to commit your changes.</p> <p>cEOS</p> <p>The topology uses the container <code>ceos:4.32.1F</code>. This container needs to be downloaded from Arista and accordingly imported with <code>docker import &lt;file&gt; ceos:4.32.1F</code>.</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#setup","title":"Setup","text":"<pre><code>flowchart LR\n    h1{h1}\n    h2{h2}\n    h3{h3}\n    h4{h4}\n    edge1(edge1)\n    edge2(edge2)\n    core1\n\n    edge1 ---|MPLS| core1 ---|MPLS| edge2\n\n    h1 ---- edge1\n    edge2 ---- h3\n    h2 ---- edge1\n    edge2 ---- h4\n\n    subgraph CustX\n        h2\n        h4\n    end\n    subgraph CustA\n        h1\n        h3\n    end\n</code></pre> <p>To interact with the virtual devices, you need to start the topology located in the \"netlab\" directory. From the main directory, you can use the shortcut command <code>make setup</code> to initiate it. To tear down the lab, use <code>make destroy</code>. If you have the necessary expertise, you can edit the netlab topology, such as changing the Network Operating Systems (NOSs).</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#lab","title":"Lab","text":"<p>In general, you have to automate the following use case and implement it with Nornir.</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#l3-service","title":"L3 Service","text":"<p>In this task, you will automate the deployment of new Layer 3 VPN (L3VPN) services by configuring Virtual Routing and Forwarding (VRF) instances on edge routers.</p> <ul> <li>VRF Creation: For each new L3 service defined in <code>services.yaml</code>, a corresponding VRF must be created on the relevant edge routers.</li> <li>BGP Integration: Once the VRF is created, it must be integrated into the BGP configuration by adding it to the appropriate BGP address family. This ensures that the VRF can exchange routing information with other routers in the MPLS network.</li> <li>Access Interface Configuration: Configure the appropriate access interfaces on the edge routers and assign them to the correct VRF.</li> </ul> <p>By automating these steps, you will streamline the provisioning of L3VPN services, ensuring consistent and reliable configurations across your network.</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#how-to-start","title":"How to start","text":"<p>It can be overwhelming and hard to find a good strategy how to start this lab. For the kickstart, a project template is provided. Part of the lab is to be able to get an abstract requirement and be able to analyze what is needed.</p> <p>The following is a possible approach to reach the goal as efficiently as possible.</p> <ul> <li>Configure it manually (Bevor you can automate something you should understand what you need to do)</li> <li>Document in a text file what steps need to be done and how they depend on each other</li> <li>Try to separate the base setup (for all services the same and needed once) and the service individual configuration.</li> <li>Spot variables in your service configuration. What values are changing for different deployments?</li> <li>Create Templates where it makes sense</li> <li>Automate the workflow</li> </ul>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#mpls-refresh","title":"MPLS Refresh","text":"<p>For this lab, you don't need a deep MPLS understanding as the basic configuration is given already.</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#mpls-edge","title":"MPLS Edge","text":"<p>When discussing MPLS, the concepts of Provider Edge (PE) and Customer Edge (CE) routers often come to mind. CEs connect to a PE and exchange IPv4 and IPv6 prefixes within an L3 service, learning about available prefixes on other connected networks through the PE. Routing protocols facilitate this exchange, especially when PEs and CEs are managed by different parties, such as when an MPLS L3 service is provided by a service provider. However, if the same organization manages both devices, this added complexity is often unnecessary. In such cases, PEs and CEs can be combined into a single \"edge\" router.</p> <p>In this lab, we control all the hardware and can do the \"MPLS to the Edge\" approach.</p> <p>Info</p> <p>Lab Configuration The lab is already preconfigured with the base config and MPLS (OSPF and BGP). Also the Service for  <code>CustA</code> is already configured as an example. This service should be part of your automation. Base and MPLS configurations are static and do not need to be automated (The automation is done with <code>netlab</code> to spin up the topology).</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#task","title":"Task","text":"<p>Automate this use case using Nornir. Services should be deployed or deprovisioned by modifying the <code>services.yaml</code> file.</p> <p>To add a new service, include it in <code>services.yaml</code> and then execute the Python script (<code>python3 l3vpn/</code>). If a service is removed or changed in <code>services.yaml</code>, the corresponding changes should be applied to the network devices by running the same Python script again.</p> <p>There isn't a single correct solution -- multiple approaches are valid. All four hosts can be assigned to different services or any combination of services. Note that the base configuration and MPLS/BGP/OSPF configurations do not need to be automated.</p>","tags":["nornir","python","intermediate","codespaces"]},{"location":"nornir-mpls-l3-vpn-servic/#run-your-automation","title":"Run your Automation","text":"<p>If you follow the provided project structure, you can start your Python script with the following command:</p> <pre><code>python3 l3vpn/ --help\n</code></pre> <p>Connect to a device</p> <p>To connect to the devices using the shell, you can use <code>netlab</code>. Simply navigate to the \"netlab\" directory and run <code>netlab connect &lt;device name&gt;</code>.</p> <pre><code>$ cd netlab\n$ netlab connect h1\nConnecting to container clab-netlab-h1, starting bash\nh1:/# ping 172.16.2.2\nPING 172.16.2.2 (172.16.2.2): 56 data bytes\n64 bytes from 172.16.2.2: seq=0 ttl=64 time=41.640 ms\n64 bytes from 172.16.2.2: seq=1 ttl=64 time=1.856 ms\n64 bytes from 172.16.2.2: seq=2 ttl=64 time=1.506 ms\n</code></pre>","tags":["nornir","python","intermediate","codespaces"]},{"location":"st2-webhook/","title":"Triggering an ST2 Workflow","text":"Level beginner Repo https://github.com/NetAutLabs/st2_webhook Discussion Discussion GitHub Repo Codespaces GitHub Codespaces <p>In this lab, you'll explore StackStorm and create a workflow that can be triggered by a webhook.</p>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#setup","title":"Setup","text":"<p>You need to start the containers to interact with the StackStorm (st2). The docker-compose setup (from the st2-docker repo) is only for lab purposes. From the main directory, you can use the shortcut command <code>make setup</code> to initiate it. To tear down the lab, use <code>make destroy</code>. </p> <p>When starting stackstorm, VSCode will discover the process of listening to port 80 and pop up in the lower right corner to open the URL. This will open the ST2 web UI. StackStorm Username/Password by default is: <code>st2admin/Ch@ngeMe</code></p>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#tasks","title":"Tasks","text":"<p>The tasks are divided into multiple subsections. Information can be found in the official documentation.</p>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#workflow","title":"Workflow","text":"<p>Create a workflow. We use <code>core.echo</code>, <code>core.pause</code>, <code>core.noop</code> to simulate a workflow that takes a \"Service ID\" as input and deploys the service in parallel on two systems. After both jobs are finished (join all), the monitoring system is updated, and a notification is sent.</p> <p></p>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#rule","title":"Rule","text":"<p>Create a rule which uses the <code>core.st2_webhook</code> (URL: \"deploy_service\") as a trigger for the workflow created before. Make sure the service ID is passed to the workflow.</p> <p></p>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#trigger-webhook","title":"Trigger Webhook","text":"<p>A token or API key is needed to trigger a webhook. The st2 shell command can be used to generate an API key:</p> <pre><code>$ make st2client\nroot@2687a0f54536:/opt/stackstorm# st2 apikey create -k -m '{\"demo\": \"demo key to invoke webhook\"}'\nZmI0NzZkOTYwOTZlMjMyZmMzMzNiMjM1ZTRkOThkZWM0NzlhZmY5MmNmNWY3ZWFmZjZhODQ2ODRhMGZkZTMxNQ\nroot@2687a0f54536:/opt/stackstorm#\n</code></pre> <p>Now the webhook can be triggered, and the workflow will be executed.</p> <pre><code>$ curl -X POST http://localhost/api/v1/webhooks/deploy_service -H \"St2-Api-Key: ZmI0NzZkOTYwOTZlMjMyZmMzMzNiMjM1ZTRkOThkZWM0NzlhZmY5MmNmNWY3ZWFmZjZhODQ2ODRhMGZkZTMxNQ\" -H \"Content-Type: application/json\" --data '{\"id\": 1234}'\n</code></pre>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#workflow-execution","title":"Workflow Execution","text":"<p>If everything goes well, in the \"history\" tab, the workflow execution should look like the following:</p> <p></p>","tags":["st2","beginner","codespaces"]},{"location":"st2-webhook/#next-steps","title":"Next Steps","text":"<p>This exercise was a simple hello world. Feel free to discover the available packs and interact with real systems. StackStorm is a mighty orchestration workflow engine.</p>","tags":["st2","beginner","codespaces"]},{"location":"topology-with-napalm/","title":"Topology with NAPALM","text":"Level beginner Repo https://github.com/NetAutLabs/topology_with_napalm Discussion Discussion GitHub Repo Codespaces GitHub Codespaces <p>In this lab, you will collect network topology data from simulated network devices using NAPALM and visualize it. The lab is divided into three parts.</p> <p>The network devices are simulated using NAPALM mock devices. The necessary files are located in the <code>mocked_napalm_data</code> directory. The network is inspired by the G\u00c9ANT Connectivity Map and contains simplified data for Europe. The <code>node_infos.json</code> file includes all network devices enriched with metadata.</p>","tags":["napalm","beginner","codespaces","python"]},{"location":"topology-with-napalm/#display-neighbors-with-a-rich-table","title":"Display Neighbors with a Rich Table","text":"<p>The goal of this section is to print a table of network neighbors received from a router. To achieve this, complete the TODOs in <code>topology_visualizer/aa_neighbor_table.py</code>. This file also includes an example of how to interact with the NAPALM mock driver.</p> <p>Once the script is complete, it can be executed as follows to generate the neighbor table for the router <code>che01</code>:</p> <pre><code>python topology_visualizer/aa_neighbor_table.py che01\n</code></pre>","tags":["napalm","beginner","codespaces","python"]},{"location":"topology-with-napalm/#diagrams-from-textual-descriptions","title":"Diagrams from Textual Descriptions","text":"<p>Various tools can convert textual descriptions into diagrams. Kroki provides a unified API to access multiple diagramming tools without needing to install them. In this section, you'll generate network diagrams using GraphViz and D2. Complete the TODOs in <code>topology_visualizer/bb_kroki.py</code>. You may use Nornir to collect all the topology data.</p> <p>Once the script is complete, it can be executed as follows to generate an SVG using GraphViz:</p> <pre><code>python topology_visualizer/bb_kroki.py graphviz\n</code></pre> <p>Considerations:</p> <ul> <li>Experiment with different approaches, such as grouping routers by country or adding color, to improve the appearance.</li> <li>Do other tools or languages produce better results?</li> <li>Can you enrich the diagrams with additional information?</li> </ul> <p>Warning</p> <p>If you're working with sensitive data, avoid sending it to a public server. Instead, consider self-hosting Kroki or installing the necessary tools locally.</p>","tags":["napalm","beginner","codespaces","python"]},{"location":"topology-with-napalm/#geographical-map","title":"Geographical Map","text":"<p>Since we have the coordinates of the routers in <code>node_infos.json</code>, it's logical to draw the network graph on a geographical map. Plotly offers a simple interface for generating interactive diagrams and exporting them as static images. Complete the TODOs in <code>topology_visualizer/cc_plotly.py</code>, then execute the script as shown below to generate a static image <code>plotly.svg</code> and an interactive map in <code>plotly.html</code>. You may use pandas for data manipulation.</p> <pre><code>python topology_visualizer/cc_plotly.py\n</code></pre> <p>The basic map should look similar to this example. However, you should try to improve the appearance.</p> <p></p>","tags":["napalm","beginner","codespaces","python"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of tags:</p>"},{"location":"tags/#ansible","title":"ansible","text":"<ul> <li>Collect Configs with Ansible</li> </ul>"},{"location":"tags/#beginner","title":"beginner","text":"<ul> <li>Collect Configs with Ansible</li> <li>Testing DeviceHelper with PyTest</li> <li>Triggering an ST2 Workflow</li> <li>Topology with NAPALM</li> </ul>"},{"location":"tags/#codespaces","title":"codespaces","text":"<ul> <li>Collect Configs with Ansible</li> <li>Testing DeviceHelper with PyTest</li> <li>L3VPN Services with Nornir</li> <li>Triggering an ST2 Workflow</li> <li>Topology with NAPALM</li> </ul>"},{"location":"tags/#data-serialization","title":"data-serialization","text":"<ul> <li>YAML Introduction</li> </ul>"},{"location":"tags/#git","title":"git","text":"<ul> <li>Git Introduction</li> </ul>"},{"location":"tags/#intermediate","title":"intermediate","text":"<ul> <li>L3VPN Services with Nornir</li> </ul>"},{"location":"tags/#introduction","title":"introduction","text":"<ul> <li>Git Introduction</li> <li>Basic Templating</li> <li>YAML Introduction</li> </ul>"},{"location":"tags/#jinja2","title":"jinja2","text":"<ul> <li>Basic Templating</li> </ul>"},{"location":"tags/#napalm","title":"napalm","text":"<ul> <li>Topology with NAPALM</li> </ul>"},{"location":"tags/#nornir","title":"nornir","text":"<ul> <li>L3VPN Services with Nornir</li> </ul>"},{"location":"tags/#pytest","title":"pytest","text":"<ul> <li>Testing DeviceHelper with PyTest</li> </ul>"},{"location":"tags/#python","title":"python","text":"<ul> <li>L3VPN Services with Nornir</li> <li>Topology with NAPALM</li> </ul>"},{"location":"tags/#st2","title":"st2","text":"<ul> <li>Triggering an ST2 Workflow</li> </ul>"},{"location":"tags/#templating","title":"templating","text":"<ul> <li>Basic Templating</li> </ul>"},{"location":"tags/#yaml","title":"yaml","text":"<ul> <li>YAML Introduction</li> </ul>"}]}